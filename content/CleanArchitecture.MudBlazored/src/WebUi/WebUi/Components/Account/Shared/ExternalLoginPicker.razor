@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using CleanArchitecture.MudBlazored.Infrastructure.Identity

@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityRedirectManager RedirectManager

@if (externalLogins.Length == 0)
{
    <MudText Typo="Typo.body2">
        There are no external authentication services configured. See this 
        <MudLink Href="https://go.microsoft.com/fwlink/?LinkID=532715">
            article about setting up this ASP.NET application to support logging in via external services
        </MudLink>.
    </MudText>
}
else
{
    <form class="form-horizontal" action="Account/PerformExternalLogin" method="post">
        <AntiforgeryToken/>
        <MudInput T="string" InputType="InputType.Hidden" name="ReturnUrl" Value="ReturnUrl"/>
        <MudElement HtmlTag="p">
            @foreach (var provider in externalLogins)
            {
                <MudTooltip Text="@($"Log in using your {@provider.DisplayName} account")">
                    <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" value="@provider.Name">
                        @provider.DisplayName
                    </MudButton>
                </MudTooltip>
            }
        </MudElement>
    </form>
}

@code {
    private AuthenticationScheme[] externalLogins = [];

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToArray();
    }
}
