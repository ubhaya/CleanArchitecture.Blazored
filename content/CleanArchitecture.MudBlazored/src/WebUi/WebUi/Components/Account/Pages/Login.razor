@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using CleanArchitecture.MudBlazored.Infrastructure.Identity
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<MudText Typo="Typo.h1">Log in</MudText>
<MudGrid>
    <MudItem md="4">
        <section>
            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <MudText Typo="Typo.h2">Use a local account to log in.</MudText>
                <MudDivider DividerType="DividerType.Middle" />
                <ValidationSummary class="red-text" role="alert"/>
                <MudTextField T="string" autocomplete="username"
                              bind-Value="Input.Email"
                              Placeholder="name@example.com"
                              Label="Email"
                              For="() => Input.Email"/>
                <MudTextField T="string" autocomplete="current-password"
                              bind-Value="Input.Password" InputType="InputType.Password"
                              Placeholder="Password"
                              Label="Password"
                              For="() => Input.Password"/>
                <MudPaper 
                    Elevation="0">
                    <MudCheckBox T="bool" bind-Value="Input.RememberMe">
                        Remember me
                    </MudCheckBox>
                </MudPaper>
                <div>
                    <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Log in</MudButton>
                </div>
                <div>
                    <MudText Typo="Typo.body2">
                        <MudLink Href="Account/ForgotPassword">Forgot your password?</MudLink>
                    </MudText>
                    <MudText Typo="Typo.body2">
                        <MudLink Href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</MudLink>
                    </MudText>
                    <MudText Typo="Typo.body2">
                        <MudLink Href="Account/ResendEmailConfirmation">Resend email confirmation</MudLink>
                    </MudText>
                </div>
            </EditForm>
        </section>
    </MudItem>
    <MudItem md="4">
        <section>
            <MudText Typo="Typo.h3">Use another service to log in.</MudText>
            <MudDivider DividerType="DividerType.Middle" />
            <ExternalLoginPicker />
        </section>
    </MudItem>
</MudGrid>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
