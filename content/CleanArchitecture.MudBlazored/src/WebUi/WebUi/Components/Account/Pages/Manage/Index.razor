@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using CleanArchitecture.MudBlazored.Infrastructure.Identity
@using Microsoft.AspNetCore.Identity

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Profile</PageTitle>

<MudText Typo="Typo.h3">Profile</MudText>
<StatusMessage />

<MudGrid>
    <MudItem md="6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="red-text" role="alert" />
            <MudTextField T="string" Value="@username" 
                          Label="Username"
                          Placeholder="Please choose your username."
                          Disabled="true"/>
            <MudTextField T="string" 
                          bind-Value="Input.PhoneNumber"
                          Label="Phone number"
                          Placeholder="Please enter your phone number."
                          For="()=>Input.PhoneNumber!"/>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Save</MudButton>
        </EditForm>
    </MudItem>
</MudGrid>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? phoneNumber;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);

        Input.PhoneNumber ??= phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
            }
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }
}
