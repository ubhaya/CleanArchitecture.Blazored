@page "/Account/ResetPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using CleanArchitecture.MudBlazored.Infrastructure.Identity
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Reset password</PageTitle>

<MudText Typo="Typo.h1">Reset password</MudText>
<MudText Typo="Typo.h2">Reset your password.</MudText>
<MudDivider DividerType="DividerType.Middle" />
<MudGrid>
    <MudItem md="4">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="red-text" role="alert" />
            
            <MudInput Value="Input.Code" InputType="InputType.Hidden"/>
            <MudTextField T="string" autocomplete="username" 
                          Placeholder="name@example.com"
                          bind-Value="Input.Email"
                          Label="Email"
                          For="() => Input.Email"/>
            <MudTextField T="string"  autocomplete="new-password"
                          Placeholder="Password" InputType="InputType.Password"
                          bind-Value="Input.Password"
                          Label="Password"
                          For="() => Input.Password"/>
            <MudTextField T="string"  autocomplete="new-password"
                          Placeholder="Password" InputType="InputType.Password"
                          bind-Value="Input.ConfirmPassword"
                          Label="Confirm Password"
                          For="() => Input.ConfirmPassword"/>
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Reset</MudButton>
        </EditForm>
    </MudItem>
</MudGrid>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? Code { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            // Don't reveal that the user does not exist
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        if (result.Succeeded)
        {
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        identityErrors = result.Errors;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        public string Code { get; set; } = "";
    }
}
