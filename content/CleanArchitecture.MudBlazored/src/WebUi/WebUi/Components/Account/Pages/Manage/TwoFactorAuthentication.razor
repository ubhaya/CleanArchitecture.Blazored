@page "/Account/Manage/TwoFactorAuthentication"

@using Microsoft.AspNetCore.Http.Features
@using Microsoft.AspNetCore.Identity
@using CleanArchitecture.MudBlazored.Infrastructure.Identity

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Two-factor authentication (2FA)</PageTitle>

<StatusMessage />
<MudText Typo="Typo.h3">Two-factor authentication (2FA)</MudText>
@if (canTrack)
{
    if (is2faEnabled)
    {
        if (recoveryCodesLeft == 0)
        {
            <MudAlert Severity="Severity.Error">
                <strong>You have no recovery codes left.</strong>
                <MudText Typo="Typo.body2">You must <MudLink Href="Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</MudLink> before you can log in with a recovery code.</MudText>
            </MudAlert>
        }
        else if (recoveryCodesLeft == 1)
        {
            <MudAlert Severity="Severity.Error">
                <strong>You have 1 recovery code left.</strong>
                <MudText Typo="Typo.body2">You can <MudLink href="Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</MudLink>.</MudText>
            </MudAlert>
        }
        else if (recoveryCodesLeft <= 3)
        {
            <MudAlert Severity="Severity.Error">
                <strong>You have @recoveryCodesLeft recovery codes left.</strong>
                <MudText Typo="Typo.body2">You should <MudLink Href="Account/Manage/GenerateRecoveryCodes">generate a new set of recovery codes</MudLink>.</MudText>
            </MudAlert>
        }

        if (isMachineRemembered)
        {
            <form style="display: inline-block" @formname="forget-browser" @onsubmit="OnSubmitForgetBrowserAsync" method="post">
                <AntiforgeryToken />
                <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary">Forget this browser</MudButton>
            </form>
        }

        <MudButton ButtonType="ButtonType.Button" Color="Color.Primary" Href="Account/Manage/Disable2fa">Disable 2FA</MudButton>
        <MudButton ButtonType="ButtonType.Button" Color="Color.Primary" Href="Account/Manage/GenerateRecoveryCodes">Reset recovery codes</MudButton>
    }

    <MudText Typo="Typo.h4">Authenticator app</MudText>
    @if (!hasAuthenticator)
    {
        <MudButton ButtonType="ButtonType.Button" Color="Color.Primary" Href="Account/Manage/EnableAuthenticator">Add authenticator app</MudButton>
    }
    else
    {
        <MudLink ButtonType="ButtonType.Button" Color="Color.Primary" Href="Account/Manage/EnableAuthenticator">Set up authenticator app</MudLink>
        <MudLink ButtonType="ButtonType.Button" Color="Color.Primary" Href="Account/Manage/ResetAuthenticator">Reset authenticator app</MudLink>
    }
}
else
{
    <MudAlert Severity="Severity.Error">
        <strong>Privacy and cookie policy have not been accepted.</strong>
        <MudText Typo="Typo.body2">You must accept the policy before you can enable two factor authentication.</MudText>
    </MudAlert>
}

@code {
    private bool canTrack;
    private bool hasAuthenticator;
    private int recoveryCodesLeft;
    private bool is2faEnabled;
    private bool isMachineRemembered;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        var user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        canTrack = HttpContext.Features.Get<ITrackingConsentFeature>()?.CanTrack ?? true;
        hasAuthenticator = await UserManager.GetAuthenticatorKeyAsync(user) is not null;
        is2faEnabled = await UserManager.GetTwoFactorEnabledAsync(user);
        isMachineRemembered = await SignInManager.IsTwoFactorClientRememberedAsync(user);
        recoveryCodesLeft = await UserManager.CountRecoveryCodesAsync(user);
    }

    private async Task OnSubmitForgetBrowserAsync()
    {
        await SignInManager.ForgetTwoFactorClientAsync();

        RedirectManager.RedirectToCurrentPageWithStatus(
            "The current browser has been forgotten. When you login again from this browser you will be prompted for your 2fa code.",
            HttpContext);
    }
}
